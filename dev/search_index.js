var documenterSearchIndex = {"docs":
[{"location":"theory/#Theory","page":"Theory","title":"Theory","text":"","category":"section"},{"location":"theory/","page":"Theory","title":"Theory","text":"The Delaunay Tessellation Field Estimator (DTFE) and its extension to phase space (PS-DTFE) are mathematical tools for the reconstruction of the density and velocity field of a discrete point set. We review here the derivations underlying these reconstruction methods.","category":"page"},{"location":"theory/#The-Delaunay-Tessellation-Field-Estimator","page":"Theory","title":"The Delaunay Tessellation Field Estimator","text":"","category":"section"},{"location":"theory/","page":"Theory","title":"Theory","text":"Delaunay Tessellation Field Estimator (DTFE) was developed by Willem Schaap and Rien van de Weijgaert (Schaap and Weijgaert 2004, Willem Schaap 2007). The DTFE method dynamically adapts to the variation of the density and geometry of the point set. The method is used in cosmological datasets (see for example the astronomy picture of the day, 7 November 2007) as it can simultaneously capture the geometry of the voids, walls, filaments and clusters and preserve the total mass of the pointset. The total mass is not preserved in the closely related  natural neighbor interpolation based on the Voronoi tessellation. For an efficient implementation of the DTFE method in C++ see the code by Marius Cautun.","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"Consider the pointset mathcalP consisting of N labelled points p_i in mathbbR^d, the velocity set mathcalV consisting of the N velocities v_i in mathbbR^d, and the mass set mathcalM consisting of the masses m_i in mathbbR corresponding to the points in mathcalP, with i=1dotsN. Using the points and masses, we reconstruct the density field rhomathbbR^d to mathbbR. Using both the points and the velocities, we construct the velocity field vmathbbR^dto mathbbR.","category":"page"},{"location":"theory/#Density-reconstruction","page":"Theory","title":"Density reconstruction","text":"","category":"section"},{"location":"theory/","page":"Theory","title":"Theory","text":"Given the pointset mathcalP, consider the Delaunay tesselation mathcalD consisting of N_T labelled simplices D_i, with i=1dots N_T. In two dimensions, a simplex is a triangle spanning three points in mathcalP. In three dimensions, a simplex is a tetrahedron spanning four points in mathcalP.","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"(Image: A two-dimensional Delaunay tessellation with the circumscribed circles. The Delaunay tessellation has the property that no vertex is in the circumscribed circle of a triangle.)","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"Let's assume we can associate a (to be determined) density estimate rho_i to each point in mathcalP. Given a simplex D in mathcalD spanned by the vertices p_l_0dots p_l_d in mathcalP, with the corresponding densities rho_l_0 dots rho_l_d, we construct a linear interpolation of the density field in the simplex as","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"rho(x) = rho_l_0 + nabla rho (x-p_l_0)","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"with x in D and the gradient vector nabla rhoin mathbbR^d associated to the simplex determined by the d linear consistency relations rho(p_l_i) = rho_l_i for i=1dotsd. In matrix notation,","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"nabla rho = \nbeginpmatrix\np_l_1-p_l_0\nvdots\np_l_d-p_l_0\nendpmatrix^-1\nbeginpmatrix\nrho_1-rho_0\nvdots\nrho_d-rho_0\nendpmatrix","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"This system of equations is solvable when none of the points p_l_0 dots p_l_d are collinear. The integral over the linear interpolation yields","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"int_D rho(x)mathrmdx = fracV(D)d+1 sum_i in D rho_i ","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"with V(D) the volume of the simplex D and i the labels of the vertices of D in mathcalP. Note that the volume of a simplex D spanned by p_l_0 dots p_l_d can be expressed as the determinant","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"V(D) = frac1d\nbeginvmatrix\np_l_1-p_l_0\nvdots\np_l_d-p_l_0\nendvmatrix","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"The integral over density – assuming the density vanishes outside the convex hull of the Delaunay tesselation – takes the form","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"beginalign\nint rho(x) mathrmdx \n= sum_i=1^N_T int_D_i rho(x)mathrmdx\n= frac1d+1 sum_i=1^N_T V(D_i) sum_j in D_i rho_j\nendalign","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"where the first sum runs over the simplices of the tessellation and the second sum runs over the vertices of a given simplex. Note that rho_i enters the sum for each simplex for which it is a vertex. These simplices form the star W_i of the point p_i","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"(Image: The star of a vertex in a Delaunay tessellation)","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"Using this observation, we reorder the double sum, by collecting the terms involving rho_i leading to the terms rho_i(V(D_l_0) + dots + V(D_l_n)) = rho_i V(W_i), with the D_l_i's forming the star of p_i. The integral over the density is now a single sum over the points in mathcalP, i.e.,","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"int rho(x) mathrmdx =frac1d+1 sum_i=1^N rho_i V(W_i)","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"The key observation in DTFE is that when we chose the natural estimate of the density,","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"rho_i = frac(d+1) m_iV(W_i)","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"by which the density at p_i only depends on the mass at the point and the local geometry, the integral over the density reduces to the total mass of the point set","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"int rho(x)mathrmdx = sum_i=1^N m_i","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"as one might expect of a density reconstruction method.","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"Now, given a point x in mathbbR^d, we can reconstruct the density field at this point by finding the simplex in which the point lies and evaluating the linear interpolation of the density in the simplex.","category":"page"},{"location":"theory/#Velocity-reconstruction","page":"Theory","title":"Velocity reconstruction","text":"","category":"section"},{"location":"theory/","page":"Theory","title":"Theory","text":"The velocity field of the dataset is analogously reconstructed with a linear interpolation in the Delaunay cells. Given a simplex D spanned by the vertices p_l_0 dots p_l_d and the associated velocities v_l_0dotsv_l_d, we write the velocity field in the simplex D as","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"v(x) = v_l_0 + nabla v (x - p_l_0)","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"with the velocity gradient nabla v associated to the simplex determined by the linear consistency relations v(p_l_i) = v_l_i for i=1dotsd. In matrix notation,","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"nabla v = \nbeginpmatrix\np_l_1-p_l_0\nvdots\np_l_d-p_l_0\nendpmatrix^-1\nbeginpmatrix\nv_1-v_0\nvdots\nv_d-v_0\nendpmatrix","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"Now, given a point x in mathbbR^d, we can reconstruct the velocity field at this point by finding the simplex in which the point lies and evaluating the corresponding linear interpolation in the simplex.","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"Note that the gradient nabla v is a piecewise constant function. Given the gradient nabla v for each simplex, it is natural to evaluate velocity deformation modes. In three dimensions, we evaluate the divergence theta, the shear sigma_ij and the vorticity omega = epsilon^ijk omega_ij defined by","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"beginalign\ntheta = nabla cdot v = fracpartial v_xpartial x + fracpartial v_ypartial y + fracpartial v_zpartial z\nsigma_ij = frac12 leftfracpartial v_ipartial x_j + fracpartial v_jpartial x_iright - frac13 (nabla cdot v) delta_ij\nomega_ij =frac12 leftfracpartial v_ipartial x_j - fracpartial v_jpartial x_iright\nendalign","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"with the Kronecker delta delta_ij and the Levi-Civita symbol epsilon^ijk.","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"For a point x in mathbbR^d, the reconstruction amounts to looking up the corresponding simplex and velocity deformation modes.","category":"page"},{"location":"theory/#The-Phase-Space-Delaunay-Tessellation-Field-Estimator","page":"Theory","title":"The Phase-Space Delaunay Tessellation Field Estimator","text":"","category":"section"},{"location":"theory/","page":"Theory","title":"Theory","text":"The Phase-Space Delaunay Tessellation Field Estimator (PS-DTFE) extends the DTFE method to phase-space, inspired by work by [...]. For more details we refer to the publication Phase-Space Delaunay Tesselation Field Estimator. ","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"The evolution of our universe can be described in Lagrangian fluid dynamics in terms of the Lagrangian map x_t(q) = q + s_t(q) mapping a point in the space of initial conditions (Lagrangian space) to a point in the current universe (Eulerian space). The displacement field s_t(q) captures the displacement of a particle starting at q in time t. Large-scale structure formation can be visualized with the folding of a three-dimensional dark matter sheet in six-dimensional phase-space. The projection of the dark matter sheet into Eulerian space leads to the formation of multistream regions bounded by caustics in which the density spikes.","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"(Image: Phase-Space)","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"Given the Lagrangian map x_t, the density in a point x in Eulerian space is given by ","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"rho(x) = sum_q in x_t^-1(x) fracrho_udet( nabla x_t(q)) = sum_q in x_t^-1(x) fracrho_udet( I + nabla s_t(q)) ","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"where the sum ranges over all points in Lagrangian space that stream into x at the given time t. The caustics form at the boundaries of the multistream regions where the determinant of the deformation tensor vanishes, i.e. det(nabla x_t)=0.","category":"page"},{"location":"theory/","page":"Theory","title":"Theory","text":"The DTFE method successfully estimates the density in the single-stream regions. However, in multistream regions, the Delaunay tessellation may identify particles as neighbours in Eulerian space that where far separated in Lagrangian space (see the central panel of the figure above). To circumvent this problem, we evaluate the Delaunay tessellation of the particle coordinates in the early (high-redshift) configuration (that is, in Lagrangian space), where the universe was still in a single-stream state. We then evolve this tessellation with the displacement field and use the evolved tessellation to estimate the density and velocity fields in Eulerian space (see the right panel of the figure above). To this end, we identify the simplices (tetrahedra in three dimensions) in which a point x resides. This is efficiently implemented using a Bounding Volume Hierarchy (BVH), a tree structure on a set of tetrahedra spanning the dark matter sheet. Having identified the incoming simplices, the reconstruction of the density and velocities is analogous to the DTFE method, with the estimates in the individual streams summed to according to the discussion above.","category":"page"},{"location":"citations/#Citations","page":"Citations","title":"Citations","text":"","category":"section"},{"location":"citations/","page":"Citations","title":"Citations","text":"This code accompanies the publication Phase-Space Delaunay Tesselation Field Estimator, Job Feldbrugge, 2025. When using the code in your work, please cite both the paper","category":"page"},{"location":"citations/","page":"Citations","title":"Citations","text":"@article{Feldbrugge2024,\n    author = {Feldbrugge, Job},\n    title = {Phase-space Delaunay tessellation field estimator},\n    journal = {Monthly Notices of the Royal Astronomical Society},\n    volume = {536},\n    number = {1},\n    pages = {807-815},\n    year = {2024},\n    month = {12},\n    issn = {0035-8711},\n    doi = {10.1093/mnras/stae2627},\n    url = {https://doi.org/10.1093/mnras/stae2627},\n    eprint = {https://academic.oup.com/mnras/article-pdf/536/1/807/61019429/stae2627.pdf},\n}","category":"page"},{"location":"citations/","page":"Citations","title":"Citations","text":"and the code","category":"page"},{"location":"citations/","page":"Citations","title":"Citations","text":"@misc{FeldbruggeHertzsch2025,\n  title={PhaseSpaceDTFE.jl —- Julia implementation of the Phase-Space Delaunay Tesselation Field Estimator},\n  year={2025},\n  month={aug}\n  doi={10.5281/zenodo.16637561},\n  url={http://dx.doi.org/10.5281/zenodo.16637561}\n}","category":"page"},{"location":"citations/","page":"Citations","title":"Citations","text":"Please also consider citing the following papers that have been foundational to the development of the PS-DTFE method:","category":"page"},{"location":"citations/","page":"Citations","title":"Citations","text":"Delaunay Tessellation Field Estimator: \nDensity estimators in particle hydrodynamics: DTFE versus regular SPH, by F. I. Pelupessy, W. E. Schaap, and R. van de Weygaert, 2003, \nThe PhD thesis of W. E. Schaap, 2007, University of Groningen, Netherlands\nKey developments on phase-space methods in large-scale structure:\nThe multi-stream flows and the dynamics of the cosmic web, by Sergei F. Shandarin, 2011\nTracing the Dark Matter Sheet in Phase Space, by T. Abel, O. Hahn, R. Kaehler, 2012","category":"page"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"","category":"page"},{"location":"reference/#PhaseSpaceDTFE.BVH","page":"Reference","title":"PhaseSpaceDTFE.BVH","text":"BVH(data, box, depth, left, right)\n\nA Bounding Volume Hierarchy (BVH) tree structure on a set of geometric objects.\n\n\n\n\n\n","category":"type"},{"location":"reference/#PhaseSpaceDTFE.BVH-Tuple{Any, Matrix{Float64}, Matrix{Float64}, Any, Int64}","page":"Reference","title":"PhaseSpaceDTFE.BVH","text":"BVH(data, box::Matrix{Float64}, points::Matrix{Float64}, simplices, depth::Int)\n\nGenerates a Bounding Volume Hierarchy (BVH) tree structure.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PhaseSpaceDTFE.PS_DTFE","page":"Reference","title":"PhaseSpaceDTFE.PS_DTFE","text":"PS_DTFE(positions_initial, positions, velocities, m, depth, box)\n\nGenerates an Phase-Space DTFE object given the initial positions, final positions and velocities of an N-body simulation. The Boundary Volume Hirarchy goes depth levels deep. The PS_DTFE-object contains:\n\nrho::Vector{Float64}\nDrho::Matrix{Float64}\nDv::Array{Float64}\ntree::BVH\nsimplices::Matrix{Int}\npositions::Matrix{Float64}\nvelocities::Matrix{Float64}\npositions_initial::Matrix{Float64}\n\n\n\n\n\n","category":"type"},{"location":"reference/#PhaseSpaceDTFE.PS_DTFE_subbox","page":"Reference","title":"PhaseSpaceDTFE.PS_DTFE_subbox","text":"PS_DTFE_subbox\n\nPhase-Space DTFE subbox object containing\n\nN_sub::Int64\nN_target::Int64\nm::Float64\ndepth::Int64\ndir::String\nL::Float64\nNi::Int64\n\n\n\n\n\n","category":"type"},{"location":"reference/#PhaseSpaceDTFE.SimBox","page":"Reference","title":"PhaseSpaceDTFE.SimBox","text":"SimBox(L, Ni)\n\nHolds the size L of the simulation box and the particle number Ni per side length.\n\nExamples\n\njulia> SimBox(100, 64)\nSimBox(100.0, 64)\n\n\n\n\n\n","category":"type"},{"location":"reference/#PhaseSpaceDTFE.DTFE_periodic-NTuple{4, Any}","page":"Reference","title":"PhaseSpaceDTFE.DTFE_periodic","text":"DTFE_periodic(coords_q, coords_x, m, depth, sim_box; pad=0.05)\n\nConstructs the DTFE-object from the final positions coords_x assuming periodic boundary conditions. These are Float64 matrices of size (N,3). m is the particle mass, a single Float64 or a matching matrix (N, 3). pad specifies the framing width in units of L.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PhaseSpaceDTFE.DTFE_periodic-NTuple{5, Any}","page":"Reference","title":"PhaseSpaceDTFE.DTFE_periodic","text":"DTFE_periodic(coords_q, coords_x, velocities, m, depth, sim_box; pad=0.05)\n\nConstructs the DTFE-object from the final positions coords_x and velocities velocities assuming periodic boundary conditions. These are Float64 matrices of size (N,3). m is the particle mass, a single Float64 or a matching matrix (N, 3). pad specifies the framing width in units of L.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PhaseSpaceDTFE.PS_DTFE_periodic-NTuple{5, Any}","page":"Reference","title":"PhaseSpaceDTFE.PS_DTFE_periodic","text":"PS_DTFE_periodic(coords_q, coords_x, m, depth, sim_box; pad=0.05)\n\nConstructs the PS-DTFE-object from the initial positions coords_q and final positions coords_x assuming periodic boundary conditions. These are Float64 matrices of size (N,3). m is the particle mass, a single Float64 or a matching matrix (N, 3). pad specifies the framing width in units of L.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PhaseSpaceDTFE.PS_DTFE_periodic-NTuple{6, Any}","page":"Reference","title":"PhaseSpaceDTFE.PS_DTFE_periodic","text":"PS_DTFE_periodic(coords_q, coords_x, velocities, m, depth, sim_box; pad=0.05)\n\nConstructs the PS-DTFE-object from the initial positions coords_q, final positions coords_x and velocities velocities assuming periodic boundary conditions. These are Float64 matrices of size (N,3). m is the particle mass, a single Float64 or a matching matrix (N, 3). pad specifies the framing width in units of L.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PhaseSpaceDTFE.density-Tuple{Vector{Float64}, PS_DTFE}","page":"Reference","title":"PhaseSpaceDTFE.density","text":"density(p::Vector{Float64}, estimator::PS_DTFE)\n\nEvaluate the Phase-Space DTFE density estimate in the point p.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PhaseSpaceDTFE.density_subbox-Tuple{Any, Any}","page":"Reference","title":"PhaseSpaceDTFE.density_subbox","text":"density_subbox(coords_arr, ps_dtfe_sb)\n\nEvaluate the Phase-Space DTFE density estimates in given coordinates coords_arr from the PS_DTFE_subbox object ps_dtfe_sb. coords_arr can be of any shape (..., 3).\n\n\n\n\n\n","category":"method"},{"location":"reference/#PhaseSpaceDTFE.findBox-Tuple{Vector{Float64}, PhaseSpaceDTFE.BVH}","page":"Reference","title":"PhaseSpaceDTFE.findBox","text":"findBox(p::Vector{Float64}, BVH_tree::BVH)\n\nFind the box in the Bounding Volume Hierarchy containing the point p.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PhaseSpaceDTFE.findCandidateSimplices-Tuple{Vector{Float64}, PhaseSpaceDTFE.BVH}","page":"Reference","title":"PhaseSpaceDTFE.findCandidateSimplices","text":"findCandidateSimplices(p::Vector{Float64}, BVH_tree::BVH)\n\nGiven a Bounding Volume Hierarchy, find a set candidate simplices that may contain the point p. The function outputs the indices of the candidate simplices.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PhaseSpaceDTFE.findIntersections-Tuple{Vector{Float64}, PhaseSpaceDTFE.BVH, Any, Any}","page":"Reference","title":"PhaseSpaceDTFE.findIntersections","text":"findIntersections(p::Vector{Float64}, BVH_tree::BVH, points, simplices)\n\nFind the indices of the simplices that intersect the point p.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PhaseSpaceDTFE.frame","page":"Reference","title":"PhaseSpaceDTFE.frame","text":"frame(coords_q, coords_x, L, pad=0.05)\n\nCosmological N-body simulations normally work with periodic boundary conditions. This function adds a frame of periodic particle positions around the simulation box to implement periodicity in the Delaunay tesselation. pad specifies the width of the frame in units of the simulation box size L.\n\n\n\n\n\n","category":"function"},{"location":"reference/#PhaseSpaceDTFE.frame_velocities","page":"Reference","title":"PhaseSpaceDTFE.frame_velocities","text":"frame_velocities(coords_x, velocities, L, pad=0.05)\n\nCosmological N-body simulations normally work with periodic boundary conditions. This function adds a frame of velocities (corresponding to the periodic particle positions) around the simulation box to implement periodicity in the Delaunay tesselation. pad specifies the width of the frame in units of the simulation box size L.\n\n\n\n\n\n","category":"function"},{"location":"reference/#PhaseSpaceDTFE.get_coords_in_subbox-NTuple{4, Any}","page":"Reference","title":"PhaseSpaceDTFE.get_coords_in_subbox","text":"get_coords_in_subbox(coords, idx, N_sub, L)\n\nFrom a given coordinates array coords, get those coordinates contained in subbox number idx.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PhaseSpaceDTFE.get_subbox_estimator-Tuple{Any, Any, Any, Any, Any, Any, Any, SimBox}","page":"Reference","title":"PhaseSpaceDTFE.get_subbox_estimator","text":"get_subbox_estimator(coords_q, coords_x, velocities, idx, N_sub, m, depth, sim_box::SimBox; pad=0.05, dir=\"./ps_dtfe\")\n\nConstruct the Phase-Space DTFE object for given coordinates and velocities. Called for each subbox estimator construction.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PhaseSpaceDTFE.get_subbox_estimator-Tuple{Any, Any, Any, Any, Any, Any, SimBox}","page":"Reference","title":"PhaseSpaceDTFE.get_subbox_estimator","text":"get_subbox_estimator(coords_q, coords_x, idx, N_sub, m, depth, sim_box::SimBox; pad=0.05, dir=\"./ps_dtfe\")\n\nObtain the subbox estimator associated to a given position.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PhaseSpaceDTFE.get_subboxes-Tuple{PS_DTFE_subbox}","page":"Reference","title":"PhaseSpaceDTFE.get_subboxes","text":"get_subboxes(ps_dtfe_sub::PS_DTFE_subbox)\n\nGet all subbox indices.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PhaseSpaceDTFE.inSimplices-Tuple{Vector{Float64}, PS_DTFE}","page":"Reference","title":"PhaseSpaceDTFE.inSimplices","text":"inSimplices(p::Vector{Float64}, estimator::PS_DTFE)\n\nFind the simplices in the Eulerian-evolved tesselation that contain the point p.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PhaseSpaceDTFE.intersection-Tuple{Vector{Float64}, Any}","page":"Reference","title":"PhaseSpaceDTFE.intersection","text":"intersection(p::Vector{Float64}, simplex)\n\nCheck whether the point p is contained in the simplex.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PhaseSpaceDTFE.numberOfStreams-Tuple{Vector{Float64}, PS_DTFE}","page":"Reference","title":"PhaseSpaceDTFE.numberOfStreams","text":"numberOfStreams(p::Vector{Float64}, estimator::PS_DTFE)\n\nEvaluates the number of incoming streams in point in the point p.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PhaseSpaceDTFE.numberOfStreams_subbox-Tuple{Any, Any}","page":"Reference","title":"PhaseSpaceDTFE.numberOfStreams_subbox","text":"numberOfStreams_subbox(coords_arr, ps_dtfe_sb)\n\nEvaluate the number of streams field in given coordinates coords_arr from the PS_DTFE_subbox object ps_dtfe_sb. coords_arr can be of any shape (..., 3).\n\n\n\n\n\n","category":"method"},{"location":"reference/#PhaseSpaceDTFE.ps_dtfe_subbox-Tuple{Any, Any, Any, Any, Any, SimBox}","page":"Reference","title":"PhaseSpaceDTFE.ps_dtfe_subbox","text":"ps_dtfe_subbox(coords_q, coords_x, velocities, m, depth, sim_box::SimBox; N_target=128, pad=0.05, dir=\"./ps_dtfe\")\n\nConstruct the Phase-Space DTFE subbox estimator given the initial positions coords_q, final positions coords_x and velocities velocities of an N-body simulation, assuming periodic boundary positions. The Boundary Volume Hirarchy goes depth levels deep. For data types, see documentation of PS_DTFE_periodic(). The keyword argument N_target=128 specifies the number of particles (N_target^3) per subbox. pad is the framing width in units of L. dir is the data storage directory.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PhaseSpaceDTFE.ps_dtfe_subbox-Tuple{Any, Any, Any, Any, SimBox}","page":"Reference","title":"PhaseSpaceDTFE.ps_dtfe_subbox","text":"ps_dtfe_subbox(coords_q, coords_x, m, depth, sim_box::SimBox; N_target=128, pad=0.05, dir=\"./ps_dtfe\")\n\nConstruct the Phase-Space DTFE subbox estimator given the initial positions coords_q and final positions coords_x of an N-body simulation, assuming periodic boundary positions. The Boundary Volume Hirarchy goes depth levels deep. For data types, see documentation of PS_DTFE_periodic(). The keyword argument N_target=128 specifies the number of particles (N_target^3) per subbox. pad is the framing width in units of L. dir is the data storage directory.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PhaseSpaceDTFE.translate-Tuple{Any, Any, Any}","page":"Reference","title":"PhaseSpaceDTFE.translate","text":"translate(coords_q, coords_x, L)\n\nCosmological N-body simulations normally work with periodic boundary conditions. This function shifts both the initial and final positions of the particles such that they are located in the simulation box in Eulerian space.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PhaseSpaceDTFE.unwrap_s-Tuple{Any, Any}","page":"Reference","title":"PhaseSpaceDTFE.unwrap_s","text":"unwrap_s(s, L)\n\nCosmological N-body simulations normally work with periodic boundary conditions. This function undoes the wrapping of particles around the box in the displacement field, assuming the particles did not travel more than half the size of the box.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PhaseSpaceDTFE.unwrap_x_-Tuple{Any, Any, Any}","page":"Reference","title":"PhaseSpaceDTFE.unwrap_x_","text":"unwrap_x_(q, x, L)\n\nCosmological N-body simulations normally work with periodic boundary conditions. This function undoes the wrapping of particles around the box, assuming the particles did not travel more than half the size of the box.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PhaseSpaceDTFE.velocity","page":"Reference","title":"PhaseSpaceDTFE.velocity","text":"velocity(p::Vector{Float64}, estimator::PS_DTFE, single_stream=false)\n\nEvaluate the Phase-Space DTFE velocity estimate in the point p. Returns a matrix of size (n, 3) for n stream velocities ((1,3) in single-stream regions, (n, 3) otherwise). If single_stream=true, returns [NaN NaN NaN] in multistream regions.\n\n\n\n\n\n","category":"function"},{"location":"reference/#PhaseSpaceDTFE.velocitySum-Tuple{Vector{Float64}, PS_DTFE}","page":"Reference","title":"PhaseSpaceDTFE.velocitySum","text":"velocitySum(p::Vector{Float64}, estimator::PS_DTFE)\n\nEvaluate the stream-mass weighted sum of the Phase-Space DTFE velocities estimates for the individual streams in the point p.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PhaseSpaceDTFE.velocitySum_subbox-Tuple{Any, Any}","page":"Reference","title":"PhaseSpaceDTFE.velocitySum_subbox","text":"velocitySum_subbox(coords_arr, ps_dtfe_sb)\n\nEvaluate the stream-mass weighted sum of the Phase-Space DTFE stream velocity estimates in given coordinates coords_arr from the PS_DTFE_subbox object ps_dtfe_sb. coords_arr can be of any shape (..., 3).\n\n\n\n\n\n","category":"method"},{"location":"reference/#PhaseSpaceDTFE.velocity_subbox-Tuple{Any, Any}","page":"Reference","title":"PhaseSpaceDTFE.velocity_subbox","text":"velocity_subbox(coords_arr, ps_dtfe_sb)\n\nEvaluate the Phase-Space DTFE velocity estimates in given coordinates coords_arr from the PS_DTFE_subbox object ps_dtfe_sb. coords_arr can be of any shape (..., 3). In the current code release, [NaN NaN NaN] is returned in multistream regions, i.e. individual stream velocities are not supported.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PhaseSpaceDTFE.volume-Tuple{Any, Any}","page":"Reference","title":"PhaseSpaceDTFE.volume","text":"volume(sim, points)\n\nEvaluate the volume of the simplex sim.\n\n\n\n\n\n","category":"method"},{"location":"#Phase-Space-DTFE","page":"Home","title":"Phase-Space DTFE","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for PhaseSpaceDTFE.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Density field)","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The PhaseSpaceDTFE package can be installed with the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add https://github.com/jfeldbrugge/PhaseSpaceDTFE.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"Or, equivalently, via the Pkg API:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> import Pkg; Pkg.add(\"https://github.com/jfeldbrugge/PhaseSpaceDTFE.jl\")","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Given the initial (coords_q) and final (coords_x) particle positions and velocities vels of an N-body simulation, we estimate the density, velocity and number of streams fields as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using PhaseSpaceDTFE\n\nm = 1. # particle mass\ndepth = 5\nsim_box = SimBox(L, Ni)\n\nps_dtfe_sb = ps_dtfe_subbox(coords_q, coords_x, vels, m, depth, sim_box)\n\nRange = 0.:0.2:100.\ncoords_arr  = [[L/2., y, z] for y in Range, z in Range]\ndensity_field = density_subbox(coords_arr, ps_dtfe_sb)\nnumberOfStreams_field = numberOfStreams_subbox(coords_arr, ps_dtfe_sb)\nvelocitySum_field = velocitySum_subbox(coords_arr, ps_dtfe_sb)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Please have a look at the Tutorial page for more details.","category":"page"},{"location":"#Contributors","page":"Home","title":"Contributors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This code was written by:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Job Feldbrugge (job.feldbrugge@ed.ac.uk)\nBenjamin Hertzsch (benjamin.hertzsch@ed.ac.uk)","category":"page"},{"location":"","page":"Home","title":"Home","text":"We thank:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Bram Alferink","category":"page"},{"location":"tutorial/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"In this tutorial, we demonstrate the usage of the PhaseSpaceDTFE package to estimate the density and velocity fields from a GADGET-4 simulation.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"We start by importing the relevant libraries and loading the data:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using JLD2, Plots, HDF5, ProgressMeter, PhaseSpaceDTFE\n\n## set up simulation box\nNi = 64\nL  = 100.\nsim_box = SimBox(L, Ni)   ## need this for estimator creation\n\ndepth   = 5   # depth of estimator search tree\n\n## load data \nfunction load_data(file)\n    fid = h5open(file, \"r\")\n    pos = convert.(Float64, read(fid[\"PartType1\"][\"Coordinates\"]))\n    vel = convert.(Float64, read(fid[\"PartType1\"][\"Velocities\"]))\n    ids = read(fid[\"PartType1\"][\"ParticleIDs\"])\n    time = read_attribute(fid[\"Header\"], \"Time\")\n    close(fid)\n\n    ordering = sortperm(ids)\n    return (copy(pos[:,ordering]'), copy(vel[:,ordering]'), time)\nend\n\nfunction load_mass(file)\n    f = h5open(file, \"r\")\n    read_attribute(f[\"Header\"], \"MassTable\")[2]  # particle type 1\nend\n\nm = load_mass(\"../../test/data/snapshot_000.hdf5\")\n(coords_q, _, _) = load_data(\"../../test/data/snapshot_000.hdf5\")\n(coords_x, vels, _) = load_data(\"../../test/data/snapshot_002.hdf5\")","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The particle coordinates and velocities are Float64 matrices of size (N, 3). The particle mass m is a single Float64 or a matrix of size (N, 3) for individual particle masses.","category":"page"},{"location":"tutorial/#Prequel:-Delaunay-Tesselation-Field-Estimator","page":"Tutorial","title":"Prequel: Delaunay Tesselation Field Estimator","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Before going though through PS-DTFE method, we demonstrate the traditional DTFE method by calling the PS-DTFE code only on the final (Eulerian) particle positions. For details, see examples below.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"## construct estimator\nps_dtfe = PS_DTFE_periodic(coords_x, coords_x, vels, m, depth, sim_box)\n## This is equivalent to the DTFE_periodic routine\n# ps_dtfe = DTFE_periodic(coords_x, vels, m, depth, sim_box)\n\n## evaluate density field\nRange = 0:2.0:100.\ndensity_field = [PhaseSpaceDTFE.density([L/2., y, z], ps_dtfe) for y in Range, z in Range]\nheatmap(Range, Range, log10.(density_field), aspect_ratio=:equal, xlims=(0, L), ylims=(0, L), c=:grays, xlabel=\"[Mpc]\", ylabel=\"[Mpc]\")","category":"page"},{"location":"tutorial/#Phase-Space-Delaunay-Tessellation-Field-Estimator-—-basic-implementation","page":"Tutorial","title":"Phase-Space Delaunay Tessellation Field Estimator — basic implementation","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"We now demonstrate the use of the PS-DTFE method with the basic implementation that is suitable to simulations up to size 128^3 particles.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The first step is the construction of the estimator object from the initial (Lagrangian) and final (Eulerian) positions, coords_q and coords_x. This is done only once as a pre-computation step.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"## construct estimator\nps_dtfe = PS_DTFE_periodic(coords_q, coords_x, vels, m, depth, sim_box)\n\n## if want to ignore velocities\n# ps_dtfe = PS_DTFE_periodic(coords_q, coords_x, m, depth, box)\n\n## for further use without pre-computation, consider saving the estimator to file\n# save(\"ps_dtfe.jld2, \"ps-dtfe\", ps_dtfe)\nnothing","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The argument depth specifies the simplex search tree depth in the estimator. Higher tree depths result in faster field evaluations, but require longer construction times. We recommend to start with depth=5 and increase this if required for high-resolution density fields.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The construction time should be of order 1-2 minutes for a 64^3 simulation at depth=7, or a 128^3 simulation at depth=5 on a modern computer.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"We now evaluate the density field with the density() function:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"# evaluate density field\ndensity_field = [PhaseSpaceDTFE.density([L/2., y, z], ps_dtfe) for y in Range, z in Range]\nheatmap(Range, Range, log10.(density_field), aspect_ratio=:equal, xlims=(0, L), ylims=(0, L), c=:grays, xlabel=\"[Mpc]\", ylabel=\"[Mpc]\")","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The corresponding number of streams is evaluated with the numberOfStreams() function:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"nstreams_field = [numberOfStreams([L/2., y, z], ps_dtfe) for y in Range, z in Range]\nheatmap(Range, Range, nstreams_field, aspect_ratio=:equal, xlims=(0, L), ylims=(0, L), clim=(1, 7), xlabel=\"[Mpc]\", ylabel=\"[Mpc]\")","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Similarly, the velocity field is evaluated with the velocity()-function:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"velocity_field = [velocity([L/2., y, z], ps_dtfe) for y in Range, z in Range]","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"In multistream regions, the velocity()-function returns the velocities of the individual streams (or NaN if single_stream=true is set in the function). To obtain the stream-mass weighted summation of the velocities, call the velocitySum()-function, which reduces to the velocity()-function in single-stream regions.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"velocity_field = [velocitySum([L/2., y, z], ps_dtfe) for y in Range, z in Range]","category":"page"},{"location":"tutorial/#The-Phase-Space-Delaunay-Tessellation-Field-Estimator-—-subbox-implementation","page":"Tutorial","title":"The Phase-Space Delaunay Tessellation Field Estimator — subbox implementation","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"We now demonstrate the use of the PS-DTFE method for simulations with more than 128^3 particles.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"It is not feasible to directly apply the basic PS-DTFE implementation to high-resolution simulations, as the construction of the estimator's simplex search tree would require immense working memory (> 100 GB for 256^3 particles). To circumvent this, the subbox routine internally divides the simulation box into smaller subboxes, constructs an estimator for each of these and writes the estimator to file. The user constructs the ps_dtfe_sb object holding the subbox references as follows:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"## construct estimators with velocities\nps_dtfe_sb = ps_dtfe_subbox(coords_q, coords_x, vels, m, depth, sim_box; N_target=32)\n\n## construct estimator without velocities\n# ps_dtfe_sb = ps_dtfe_subbox(coords_q, coords_x, m, depth, sim_box; N_target=32)\n\n## it is recommended to save the estimator object (holding the subbox references) for further use\nsave(\"ps_dtfe_sb.jld2\", \"ps-dtfe-sb\", ps_dtfe_sb)\nps_dtfe_sb = load(\"ps_dtfe_sb.jld2\")[\"ps-dtfe-sb\"]\nnothing","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The keyword argument N_target specifies the particle number (N_target^3) of the subboxes. We recommend to use the default value N_target=128.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"For a 256^3 simulation with 8 subboxes of size N_target=128 at depth=5-7, the construction time should be of order 10-30 minutes. The estimator objects will require about 20-50 GB of storage space, which can be deleted after the field evaluations (see below).","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"For internal efficiency, the density field is evaluated by directly passing on the list of coordinates to the density_subbox()-function:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"coords_arr = [[L/2., y, z] for y in Range, z in Range]\ndensity_field = density_subbox(coords_arr, ps_dtfe_sb)\nheatmap(Range, Range, log10.(density_field), aspect_ratio=:equal, xlims=(0, L), ylims=(0, L), c=:grays, xlabel=\"[Mpc]\", ylabel=\"[Mpc]\") ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The number of streams follows analogously with numberOfStreams_subbox()-function:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"nstreams_field = numberOfStreams_subbox(coords_arr, ps_dtfe_sb)\nheatmap(Range, Range, nstreams_field, aspect_ratio=:equal, xlims=(0, L), ylims=(0, L), clim=(1, 7), xlabel=\"[Mpc]\", ylabel=\"[Mpc]\") ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Finally, the velocities are evaluated with the velocity()- or velocitySum()-function:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"velocitySum_field = velocitySum_subbox(coords_arr, ps_dtfe_sb)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"We clear the temporary files here. The user might wish to consider storing the estimators for further use.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"rm(\"ps_dtfe\", recursive=true)\nrm(\"ps_dtfe_sb.jld2\")","category":"page"}]
}
